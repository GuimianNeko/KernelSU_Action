name: Build GKI A12 with MKSU
on:
  workflow_dispatch:
    inputs:
      TAG:
        required: true
        default: "android12-5.10-2024-11"
      patch_level:
        required: true
        type: string
        default: "2024-11"
        description: "设置内核补丁级别"
      user_name:
        required: true
        default: 'build-user'
        description: "自定义用户名称"
      host_name:
        required: true
        default: 'build-host'
        description: "自定义主机名称"
      kernel_name:
        required: true
        default: '-android12-9-00064-gea4a6f067d3f-ab12969919'
        description: "自定义内核名称"
      timestamp:
        required: true
        default: 'Fri Jan 24 18:48:47 UTC 2025'
        description: "自定义构建时间"
      mksu_version:
        required: true
        type: choice
        description: '选择mksu版本'
        options:
        - susfs-main
        - susfs-dev
        default: 'susfs-main'
      mksu_kpm:
        required: true
        type: choice
        description: '是否开启KPM？'
        options:
        - enable
        - disable
        default: 'enable'
      manual_vfs_hook:
        required: true
        type: choice
        description: '是否开启手动钩子？'
        options:
        - enable
        - disable
        default: 'enable'

jobs:
  build:
    name: Build ${{ inputs.TAG }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10
    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: gki-kernel-aarch64-${{ inputs.TAG }}
        max-size: 2G
    - name: Download Kernel Source
      run: |
        cd $GITHUB_WORKSPACE
        sudo apt update
        sudo apt install -y repo bc binutils-dev bison build-essential ca-certificates cmake curl file flex git libelf-dev libssl-dev lld make ninja-build python3-dev texinfo u-boot-tools xz-utils zlib1g-dev libncurses-dev pahole
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android12-5.10
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        git clone https://github.com/WildPlusKernel/kernel_patches.git
        git clone https://github.com/wizxy/patch.git
        git config --global user.name "wizxy"
        git config --global user.email wizxy@users.noreply.github.com
        mkdir android-kernel && cd android-kernel
        REMOTE_BRANCH=$(git ls-remote https://github.com/aosp-mirror/kernel_common ${{ inputs.TAG }})
        if grep -q deprecated <<< $REMOTE_BRANCH; then
          echo "Found deprecated branch: ${{ inputs.TAG }}"
          git clone --recursive https://github.com/aosp-mirror/kernel_common -b deprecated/${{ inputs.TAG }} common --depth=1
        else
          git clone --recursive https://github.com/aosp-mirror/kernel_common -b ${{ inputs.TAG }} common --depth=1
        fi
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s ${{ inputs.mksu_version }}
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        
        cd ./common
        patch -p1 < 50_add_susfs_in_gki-android12-5.10.patch || true
        
        if [[ "${{ inputs.manual_vfs_hook }}" == "enable" ]]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          cd ..
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
        else
          cd ..
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
        fi
        if [[ "${{ inputs.mksu_kpm }}" == "enable" ]]; then
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
        fi
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
        
        sed -i '2s/check_defconfig//' ./common/build.config.gki
        sed -i '$s|echo "\$res"|echo "${{ inputs.kernel_name }}"|' ./common/scripts/setlocalversion
        perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT ${{ inputs.timestamp }}"}' ./common/scripts/mkcompile_h
        
    - name: Build Boot
      working-directory: android-kernel
      run: |
        #LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
        mkdir clang
        wget -qO clang.tar.gz https://android.googlesource.com/platform//prebuilts/clang/host/linux-x86/+archive/b669748458572622ed716407611633c5415da25c/clang-r416183b.tar.gz
        tar -C clang/ -zxf clang.tar.gz
        export PATH=$GITHUB_WORKSPACE/android-kernel/clang/bin:$PATH
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
        export KBUILD_BUILD_USER=${{ inputs.user_name }}
        export KBUILD_BUILD_HOST=${{ inputs.host_name }}
        export KBUILD_BUILD_TIMESTAMP="${{ inputs.timestamp }}"
        cd common
        make LLVM=1 LLVM_IAS=1 ARCH=arm64 CC="/usr/bin/ccache clang" HOSTCC="/usr/bin/ccache clang" HOSTCXX="/usr/bin/ccache clang++" O=out gki_defconfig
        scripts/config --file out/.config \
          -e LTO_CLANG \
          -d LTO_NONE \
          -e LTO_CLANG_THIN \
          -d LTO_CLANG_FULL \
          -e THINLTO
        make LLVM=1 LLVM_IAS=1 ARCH=arm64 CC="/usr/bin/ccache clang" HOSTCC="/usr/bin/ccache clang" HOSTCXX="/usr/bin/ccache clang++" O=out -j$(nproc)
        cp -r $GITHUB_WORKSPACE/android-kernel/common/out/arch/arm64/boot $GITHUB_WORKSPACE/android-kernel/dist
        if [[ "${{ inputs.mksu_kpm }}" == "enable" ]]; then
          cd $GITHUB_WORKSPACE/android-kernel/dist
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod +x patch
          ./patch && mv -f oImage Image
        fi
    - name: Download prebuilt toolchain
      run: |
        cd $GITHUB_WORKSPACE
        AOSP_MIRROR=https://android.googlesource.com
        BRANCH=main-kernel-build-2024
        # Clone necessary prebuilt tools
        git clone $AOSP_MIRROR/platform/prebuilts/build-tools -b $BRANCH --depth 1 build-tools
        git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
        git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
        pip3 install telethon
        # Export paths to required tools as environment variables
        export AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool
        export GZIP=$GITHUB_WORKSPACE/build-tools/path/linux-x86/gzip
        export LZ4=$GITHUB_WORKSPACE/build-tools/path/linux-x86/lz4
        export MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py
        export UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py
        cd android-kernel && mkdir bootimgs
        cp ./dist/Image ./bootimgs
        cd ./bootimgs
        GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-${{ github.event.inputs.TAG }}_r1.zip
        FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2024-01_r1.zip
        status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
        if [ "$status" = "200" ]; then
            curl -Lo gki-kernel.zip "$GKI_URL"
        else
            echo "[+] $GKI_URL not found, using $FALLBACK_URL"
            curl -Lo gki-kernel.zip "$FALLBACK_URL"
        fi
        unzip gki-kernel.zip && rm gki-kernel.zip
        echo 'Unpack prebuilt boot.img'
        $UNPACK_BOOTIMG --boot_img="./boot-5.10.img"                
        echo 'Building boot.img'
        $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level ${{ inputs.patch_level }}
        $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        cp ./boot.img ./${{ github.event.inputs.TAG }}-boot.img
    - name: Prepare artifacts
      run: |
        OUTDIR=android-kernel/dist/
        git clone https://github.com/Kernel-SU/AnyKernel3
        rm -rf ./AnyKernel3/.git
        cp $OUTDIR/Image ./AnyKernel3/
    - name: Upload Boot
      uses: actions/upload-artifact@v4
      with:
        name: Boot-${{ github.event.inputs.TAG }}
        path: android-kernel/bootimgs/${{ github.event.inputs.TAG }}-boot*
    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ github.event.inputs.TAG }}
        path: ./AnyKernel3/*
