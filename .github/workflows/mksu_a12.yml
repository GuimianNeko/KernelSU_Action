name: Build GKI A12 with MKSU
on:
  workflow_dispatch:
    inputs:
      TAG:
        required: true
        default: "android12-5.10-2024-05"
      patch_level:
        required: true
        type: string
        default: "2024-05"
        description: >
          Set Kernel patch level
      manual_vfs_hook:
        required: true
        type: choice
        description: 'Select manual vfs hook'
        options:
        - newhook
        - disable
        default: 'newhook'
      mksu_branch:
        required: true
        type: choice
        description: 'Select mksu branch'
        options:
        - main
        - susfs-dev
        default: 'susfs-dev'

jobs:
  build:
    name: Build ${{ inputs.TAG }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 8192
        temp-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
    - uses: actions/checkout@v4
    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: gki-kernel-aarch64-${{ inputs.TAG }}
        max-size: 2G
    - name: Download Kernel Source
      run: |
        cd $GITHUB_WORKSPACE
        sudo apt install -y bc binutils-dev bison build-essential ca-certificates cmake curl file flex git libelf-dev libssl-dev lld make ninja-build python3-dev texinfo u-boot-tools xz-utils zlib1g-dev libncurses-dev pahole
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android12-5.10
        git clone https://github.com/wizxy/kernel_patches.git
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        git clone https://gerrit.googlesource.com/git-repo
        git config --global user.name "wizxy"
        git config --global user.email wizxy@users.noreply.github.com
        mkdir android-kernel && cd android-kernel
        ../git-repo/repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ github.event.inputs.TAG }}
        REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ github.event.inputs.TAG }})
        DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml          
        # Check if the branch is deprecated and adjust the manifest
        if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${{ github.event.inputs.TAG }}\"/\"deprecated\/${{ github.event.inputs.TAG }}\"/g" $DEFAULT_MANIFEST_PATH
        fi
        # Verify repo version and sync the kernel source
        ../git-repo/repo --version
        ../git-repo/repo --trace sync -c -j$(nproc --all) --no-tags --fail-fast
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash -s ${{ inputs.mksu_branch }}
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cp -r ../SukiSU_patch/other/lz4k/include/linux/* ./common/include/linux
        cp -r ../SukiSU_patch/other/lz4k/lib/* ./common/lib
        cp -r ../SukiSU_patch/other/lz4k/crypto/* ./common/crypto
        cp ../kernel_patches/zcomp.c ./common/drivers/block/zram
        cp ../kernel_patches/Kconfig ./common/drivers/block/zram
        
        cd ./KernelSU
        if [[ "${{ inputs.mksu_branch }}" == "main" ]]; then
          cp ./patch/* ./
          patch --fuzz=3 -p1 < sukisu_susfs.patch || true
        fi
        cd ../common
        patch -p1 < 50_add_susfs_in_gki-android12-5.10.patch || true
        cp ../../kernel_patches/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch
        cp ../../kernel_patches/lz4kd.patch ./
        patch -p1 -F 3 < lz4kd.patch
        
        if [[ "${{ inputs.manual_vfs_hook }}" == "newhook" ]]; then
          cp ../../kernel_patches/hooks/new_hooks.patch ./
          patch -p1 -F 3 < new_hooks.patch
          cd ..
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
        else
          cd ..
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
        fi
        echo "Adding configuration settings to gki_defconfig..."
        echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

        # Add additional tmpfs config setting
        echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

        # Add additional config setting
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

        # Add bbrv3 config setting
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig 
        echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_NET_SCH_DEFAULT=y" >> ./common/arch/arm64/configs/gki_defconfig
        echo "CONFIG_DEFAULT_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
        
        # Add zram config setting
        echo "obj-y += lz4k/" >> ./common/lib/Makefile
        echo "obj-y += lz4kd/" >> ./common/lib/Makefile
        echo "obj-y += lz4k.o" >> ./common/crypto/Makefile
        echo "obj-y += lz4kd.o" >> ./common/crypto/Makefile
        echo "CONFIG_ZRAM=y" >> ./common/arch/arm64/configs/gki_defconfig
        sed -i 's/default_compressor = "lzo-rle"/default_compressor = CONFIG_ZRAM_DEF_COMP/g' ./common/drivers/block/zram/zram_drv.c
        
        sed -i '2s/check_defconfig//' ./common/build.config.gki
        sed -i "\$s/\$res/-android12-9-00019-g4ea09a298bb4-ab12292661/" ./common/scripts/setlocalversion
    - name: Build Boot
      working-directory: android-kernel
      run: |
        #LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
        mkdir clang
        wget -O clang.tar.gz https://github.com/ZyCromerZ/Clang/releases/download/12.0.1-20230207-release/Clang-12.0.1-20230207.tar.gz
        tar -C clang/ -zxvf clang.tar.gz
        export PATH=$GITHUB_WORKSPACE/android-kernel/clang/bin:$PATH
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
        cd common
        make LLVM=1 LLVM_IAS=1 ARCH=arm64 CC="/usr/bin/ccache clang" HOSTCC="/usr/bin/ccache clang" HOSTCXX="/usr/bin/ccache clang++" O=out gki_defconfig
        scripts/config --file out/.config \
          -e LTO_CLANG \
          -d LTO_NONE \
          -e LTO_CLANG_THIN \
          -d LTO_CLANG_FULL \
          -e THINLTO
        make LLVM=1 LLVM_IAS=1 ARCH=arm64 CC="/usr/bin/ccache clang" HOSTCC="/usr/bin/ccache clang" HOSTCXX="/usr/bin/ccache clang++" O=out -j$(nproc)
        cp -r $GITHUB_WORKSPACE/android-kernel/common/out/arch/arm64/boot $GITHUB_WORKSPACE/android-kernel/dist
      
    - name: Download prebuilt toolchain
      run: |
        cd $GITHUB_WORKSPACE
        AOSP_MIRROR=https://android.googlesource.com
        BRANCH=main-kernel-build-2024
        # Clone necessary prebuilt tools
        git clone $AOSP_MIRROR/platform/prebuilts/build-tools -b $BRANCH --depth 1 build-tools
        git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
        git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
        pip3 install telethon
        # Export paths to required tools as environment variables
        export AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool
        export GZIP=$GITHUB_WORKSPACE/build-tools/path/linux-x86/gzip
        export LZ4=$GITHUB_WORKSPACE/build-tools/path/linux-x86/lz4
        export MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py
        export UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py
        cd android-kernel && mkdir bootimgs
        cp ./dist/Image ./bootimgs
        cp ./dist/Image.gz ./bootimgs
        cd ./bootimgs
        GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-${{ github.event.inputs.TAG }}_r1.zip
        FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2024-01_r1.zip
        status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
        if [ "$status" = "200" ]; then
            curl -Lo gki-kernel.zip "$GKI_URL"
        else
            echo "[+] $GKI_URL not found, using $FALLBACK_URL"
            curl -Lo gki-kernel.zip "$FALLBACK_URL"
        fi
        unzip gki-kernel.zip && rm gki-kernel.zip
        echo 'Unpack prebuilt boot.img'
        $UNPACK_BOOTIMG --boot_img="./boot-5.10.img"                
        echo 'Building boot.img'
        $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level ${{ inputs.patch_level }}
        $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        cp ./boot.img ./${{ github.event.inputs.TAG }}-boot.img
        echo 'Building boot-gz.img'
        $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level ${{ inputs.patch_level }}
        $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
        cp ./boot-gz.img ./${{ github.event.inputs.TAG }}-boot-gz.img
        
    - name: Prepare artifacts
      run: |
        OUTDIR=android-kernel/dist/
        git clone https://github.com/Kernel-SU/AnyKernel3
        rm -rf ./AnyKernel3/.git
        cp $OUTDIR/Image ./AnyKernel3/
    - name: Upload Boot
      uses: actions/upload-artifact@v4
      with:
        name: Boot-${{ github.event.inputs.TAG }}
        path: android-kernel/bootimgs/${{ github.event.inputs.TAG }}-boot*
    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ github.event.inputs.TAG }}
        path: ./AnyKernel3/*
